/*
 * Swarmd Backend API Documentation for swarmd_api version 0.1.0
 *
 * # Introduction  blblbllb 
 *
 * The version of the OpenAPI document: 
 * Contact: anthony@brevz.io
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`organization_id_project_project_id_worker_upload_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationIdProjectProjectIdWorkerUploadPostError {
    Status500(),
    UnknownValue(serde_json::Value),
}


/// Upload a worker for a project, the worker won't be active and routed, it'll just be available for the project.
pub async fn organization_id_project_project_id_worker_upload_post(configuration: &configuration::Configuration, organization_id: &str, project_id: &str, body: &str) -> Result<crate::models::UploadWorkerResponse, Error<OrganizationIdProjectProjectIdWorkerUploadPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{organization_id}/project/{project_id}/worker/upload", local_var_configuration.base_path, organization_id=crate::apis::urlencode(organization_id), project_id=crate::apis::urlencode(project_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OrganizationIdProjectProjectIdWorkerUploadPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

